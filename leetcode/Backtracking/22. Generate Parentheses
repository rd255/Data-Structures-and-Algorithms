class Solution {
    List<String> res = new ArrayList<>();
    public List<String> generateParenthesis(int n) {
        if(n<0)
            return res;
        backTrack(0,n,"");
        return res;
    }
    public void backTrack(int open, int max, String curr) {
        int len = curr.length();
        if(len == 2*max) {
            if(open==0) {
                res.add(curr);
            }
            return ;
        }
        if(0<=open && open<=max) {
            backTrack(open+1,max,curr+"(");
            backTrack(open-1,max,curr+")");
        }
    }
}
/*
Medium

3306

198

Favorite

Share
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
Accepted
394,546
Submissions
690,811
*/

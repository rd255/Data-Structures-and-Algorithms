class Solution {
    Map<Integer,String> li = new HashMap<Integer,String>();
    List res = new ArrayList();
    public List<String> letterCombinations(String digits) {
        if(digits.length() == 0)
            return res;
        li.put(2,"abc");
        li.put(3,"def");
        li.put(4,"ghi");
        li.put(5,"jkl");
        li.put(6,"mno");
        li.put(7,"pqrs");
        li.put(8,"tuv");
        li.put(9,"wxyz");
        backTrack("",digits);
        return res;
    }
    public void backTrack(String combination, String next_digits) {
        if(next_digits.length() == 0) {
            res.add(combination);
            return ;
        }
        int num = next_digits.charAt(0)-48;
        String val = li.get(num);
        for(int i=0;i<val.length();i++) {
            backTrack(combination + val.charAt(i), next_digits.substring(1));
        }
        return ;
    }
}
/*
Medium

2585

336

Favorite

Share
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

Accepted
448,158
Submissions
1,041,138
*/

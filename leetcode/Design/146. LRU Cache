class LRUCache {
    int capacity;
    HashMap<Integer,Integer> storeMap = new HashMap<Integer,Integer>();
    Queue<Integer> LRUqueue = new LinkedList<Integer>();
    HashMap<Integer,Integer> LRUmap = new HashMap<Integer,Integer>();
    public LRUCache(int capacity) {
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if(storeMap.containsKey(key)) {
            LRUqueue.offer(key);
            LRUmap.put(key,LRUmap.getOrDefault(key,0)+1);
            return storeMap.get(key);
        }
        return -1;
    }
    
    public void put(int key, int value) {        
        if(!storeMap.containsKey(key) && storeMap.size() == capacity) 
            storeMap.remove(getLRU());
        storeMap.put(key,value);    
        LRUqueue.offer(key);
        LRUmap.put(key,LRUmap.getOrDefault(key,0)+1);
    }
    public int getLRU() {
        int count = -1;
        int toRemove = -1;
        while(true) {
            toRemove = LRUqueue.poll();
            count = LRUmap.get(toRemove);
            if(count ==1) {
                LRUmap.remove(toRemove);
                return toRemove;
            }
            else {
                LRUmap.put(toRemove,count-1);
            }
        }
    }
}
/*
Medium

3717

152

Favorite

Share
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
 

Accepted
363,593
Submissions
1,310,485

*/

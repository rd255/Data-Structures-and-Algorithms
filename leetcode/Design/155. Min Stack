class MinStack {
    long min;
    Stack<Long> s;
    /** initialize your data structure here. */
    public MinStack() {
        s = new Stack<Long>();
    }
    
    public void push(int x) {
        if(s.isEmpty()){
            s.push(0L);
            min = x;
        }
        else {
            s.push(min-x);
            if(x<min)
                min = x;
        }
    }
    
    public void pop() {
        if(!s.isEmpty()) {
            if(s.peek()>=0)
                min += s.peek();
            s.pop();
        }     
    }
    
    public int top() {
        if(!s.isEmpty()) 
            return s.peek()>=0 ? (int)min : (int)(min-s.peek());
        return 0;
    }
    
    public int getMin() {
        return (int)min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
Accepted
245,084
Submissions
711,985
*/

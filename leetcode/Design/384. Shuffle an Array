class Solution {
    int[] nums;
    public Solution(int[] nums) {
        this.nums = nums;
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        return nums;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        List<Integer> a = new ArrayList<Integer>();
        for(int i:nums)
            a.add(i);
        
        ArrayList<Integer> b = new ArrayList<Integer>();
        while(a.size()>0) 
            b.add((int)a.remove((int) (Math.random()*(a.size()))));
        
        int[] ret = new int[b.size()];
        for (int i=0; i < ret.length; i++)
            ret[i] = b.get(i).intValue();
        return ret;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */
/*
Shuffle a set of numbers without duplicates.

Example:

// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();
Accepted
61,522
Submissions
126,082
*/

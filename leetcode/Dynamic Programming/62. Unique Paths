class Solution {
    public int uniquePaths(int m, int n) {
        if(m==1 || n==1){
            return 1;
        }
        Integer[][] res = new Integer[m][n];
        for(int i=0;i<m;i++) {
            res[i][0] = 1;
        }
        for(int j=0;j<n;j++) {
            res[0][j] = 1;
        }
        return uniquePathsHelper(m,n,1,1,res);
    }
    public int uniquePathsHelper(int m, int n, int x, int y, Integer[][] res) {
        res[x][y] = res[x-1][y]+res[x][y-1];
        if(x==m-1 && y==n-1) {
            return res[x][y];
        }
        else if(x==m-1) {
            x=1;
            y++;
        }
        else {
            x++;
        }
        return uniquePathsHelper(m,n,x,y,res);
    }
}

/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 7 x 3 grid. How many possible unique paths are there?

Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28
Accepted
272,453
Submissions
580,519
*/

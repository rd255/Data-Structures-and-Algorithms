class Solution {
    public int[] searchRange(int[] nums, int target) {
        return searchRange(nums,0, nums.length-1,target);
    }
    int[] searchRange(int[] nums, int left, int right, int target) {
        if(left>right) {
            return new int[]{-1,-1};
        }
        int[] res = new int[2];
        int mid = (left+right)/2;
        if(nums[mid]==target) {
            int[] inner_res = searchRange(nums,left,mid-1,target);
            if(inner_res[0] == -1) 
                res[0] = mid;
            else 
                res[0] = inner_res[0];
            inner_res = searchRange(nums,mid+1,right,target);
            if(inner_res[1] == -1)
                res[1] = mid;
            else 
                res [1] = inner_res[1];
        }
        else if(nums[mid] < target) {
            res = searchRange(nums,mid+1,right,target);
        }
        else {
            res = searchRange(nums,left,mid-1,target);
        }
        return res;
    }
}
/*
Medium

1801

91

Favorite

Share
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Accepted
327,701
Submissions
965,541
*/

class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length<=1 || intervals == null)
            return intervals;
        Arrays.sort(intervals, (i1,i2) -> Integer.compare(i1[0],i2[0]));
        List<int[]> li = new ArrayList<>(); 
        int[] arr = new int[]{intervals[0][0],intervals[0][1]};
        li.add(arr);
        for (int[] interval : intervals) {
            if(interval[0]<=arr[1]) {
                arr[1] = Math.max(interval[1],arr[1]);
            }
            else {
                arr = interval;
                li.add(arr);
            }
        }
        return li.toArray(new int[li.size()][]);
    }
}
/*
Medium

2383

184

Favorite

Share
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

Accepted
384,826
Submissions
1,060,505
*/

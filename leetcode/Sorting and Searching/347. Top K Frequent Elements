class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> freq = new HashMap<Integer,Integer>();
        for(int num : nums) {
            freq.put(num, freq.getOrDefault(num,0) + 1);
        }
        ArrayList<Integer>[] li = new ArrayList[nums.length+1]; 
        for (int i = 0; i < nums.length+1; i++) { 
            li[i] = new ArrayList<Integer>(); 
        } 
        for(int key : freq.keySet()) {
            li[freq.get(key)].add(key);
        }
        List<Integer> res = new ArrayList<Integer>();
        for(int i = li.length-1; i>=0;i--) {
            res.addAll(li[i]);
            if(res.size() >= k) {
                break;
            }
        }
        return res;
    }
}
/* 
Medium

1697

105

Favorite

Share
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
Accepted
226,492
Submissions
405,168
*/

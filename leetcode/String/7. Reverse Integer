class Solution {
    public int reverse(int x) {
        long r = 0;
        int neg = 1;
        if(x<0)
            neg = -1;
        if(x==Integer.MIN_VALUE)
            return 0;
        x = Math.abs(x);
        while(x>0) {
            r*=10;
            r += x%10;
            if(neg==-1 && neg*r<Integer.MIN_VALUE)
                    return 0;
            else if(neg==1 && r>Integer.MAX_VALUE)
                return 0;
            x/=10;
        }
        return (int) r *neg;
    }
}
/*
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

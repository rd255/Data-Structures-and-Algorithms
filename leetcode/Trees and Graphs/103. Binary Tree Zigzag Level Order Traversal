/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class customQ {
    TreeNode root;
    int depth;
    public customQ(TreeNode root, int depth) {
        this.root = root;
        this.depth = depth;
    }
}
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null)
            return new ArrayList<>();
        List<List<Integer>> lli = new ArrayList<>();
        List<Integer> li = new ArrayList<>();
        Queue<customQ> q = new LinkedList<customQ>();
        int level = 0;
        boolean ltr = true;
        q.offer(new customQ(root,level));
        while(!q.isEmpty()) {
            customQ cq = q.poll();
            if(cq.depth!=level) {
                level++;
                lli.add(li);
                ltr = !ltr;
                li = new ArrayList<>();
            }
            if(ltr)
                li.add(cq.root.val);
            else
                li.add(0,cq.root.val);
            if(cq.root.left!=null) q.offer(new customQ(cq.root.left,level+1));
            if(cq.root.right!=null) q.offer(new customQ(cq.root.right, level+1));
        }
        lli.add(li);
        return lli;
    }
}
/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
Accepted
180,180
Submissions
456,566
*/

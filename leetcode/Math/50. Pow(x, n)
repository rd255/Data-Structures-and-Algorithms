class Solution {
    public double myPow(double x, int n) {
        return myLongPow(x,n);
    }
    public double myLongPow(double x, long n) {
        if(n==0)
            return 1;
        
        int neg = 1;
        if(n<0) {
            neg = -1;
            n = -1*n;
        }
        
        double rem = 1.0;
        if(n%2==1)
            rem = x;
        return Math.pow(rem * Math.pow(myLongPow(x, n/2),2),neg);
    }
}
/*
Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000
Example 2:

Input: 2.10000, 3
Output: 9.26100
Example 3:

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
Note:

-100.0 < x < 100.0
n is a 32-bit signed integer, within the range [−231, 231 − 1]
Accepted
273,308
Submissions
1,004,387
*/

class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null)
            return true;
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null) {
            fast = fast.next;
            if(fast!=null) {
                slow = slow.next;
                fast = fast.next;
            }
        }
        slow = reverseThisList(slow, null);
        while(slow!=null) {
            if(head.val!=slow.val)
                return false;
            head = head.next;
            slow = slow.next;
        }
        return true;
    }
    public ListNode reverseThisList(ListNode head, ListNode newHead) {
        if(head==null) 
            return newHead;
        ListNode next = head.next;
        head.next = newHead;
        return reverseThisList(next, head);
    }
}
/* 
Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?
*/

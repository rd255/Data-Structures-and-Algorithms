/**
Time : O(n)
Space : O(n)
*/
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null)
            return null;
        else if(l1==null)
            return l2;
        else if(l2==null)
            return l1;
        ListNode head = new ListNode(-1);
        ListNode res = head;
        int carry = 0;
        while(l1!=null || l2!=null) {
            int sum = carry;
            if(l1!=null) {
                sum+=l1.val;
                l1 = l1.next;
            }
            if(l2!=null) {
                sum+=l2.val;
                l2 = l2.next;
            }
            head.next = new ListNode(sum%10);
            head = head.next;
            carry = sum/10;
        }
        if(carry==1) {
            head.next = new ListNode(1);
        }
        return res.next;
    }
}
/*
Time : O(n)
Space : O(n)
Medium

6125

1593

Favorite

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
Accepted
1,053,266
Submissions
3,295,784

*/

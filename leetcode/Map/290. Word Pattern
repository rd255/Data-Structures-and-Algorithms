class Solution {
    public boolean wordPattern(String pattern, String str) {
        int pLen = pattern.length();
        String[] strA = str.split(" ");
        if(pLen!=strA.length) 
            return false;
        HashMap<Character, String> hm = new HashMap<Character, String>();
        HashMap<String,Character> hm2 = new HashMap<String,Character>();
        for(int i=0;i<pLen;i++) {
            Character curr = pattern.charAt(i);
            String currS = strA[i];
            if(
                (
                    (hm.containsKey(curr) &&
                (!hm.get(curr).equals(currS))
                    )
                 ||
                ((hm2.containsKey(currS)) &&
                (!hm2.get(currS).equals(curr)))
                )
            ) return false;
            else if(!hm.containsKey(curr)) {
                hm.put(curr,currS);
                hm2.put(currS,curr);    
            }
        }
        return true;
    }
}
/*
Easy

771

103

Favorite

Share
Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.

Accepted
157,170
Submissions
440,293
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        int len = nums.length;
        if(len==0)
            return null;
        return sATBHelper(nums,0,len);
    }
    public TreeNode sATBHelper(int[] nums, int start, int end) {
        if(start>=end)
            return null;
        int mid = (start+end)/2;
        System.out.println("start:"+start+",end:"+end);
        TreeNode curr = new TreeNode(nums[mid]);
        curr.left = sATBHelper(nums, start, mid);
        curr.right = sATBHelper(nums,mid+1,end);
        return curr;
    }
}
/*
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
Accepted
219,868
Submissions
458,625
*/

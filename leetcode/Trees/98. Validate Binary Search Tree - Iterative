/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.Queue;
public class qObj {
    TreeNode root;
    long min;
    long max;
    public qObj(TreeNode root1, long min1, long max1) {
        root = root1;
        min = min1;
        max = max1;
    }
}
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        Queue<qObj> q = new LinkedList<>();
        q.add(new qObj(root,Long.MIN_VALUE,Long.MAX_VALUE));
        while(!q.isEmpty()) {
            qObj curr = q.poll();
            if(curr.root==null) continue;
            if(curr.root.val<=curr.min || curr.root.val>=curr.max) return false;            
            q.add(new qObj(curr.root.left,curr.min,curr.root.val));
            q.add(new qObj(curr.root.right,curr.root.val, curr.max));
        }
        return true;
    }
    
}
/*
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.
Accepted
322,941
Submissions
1,301,870

*/

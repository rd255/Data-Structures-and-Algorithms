/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class qObj {
    TreeNode root;
    int level;
    public qObj(TreeNode root, int level) {
        this.root = root;
        this.level= level;
    }
}
class Solution {
    List<List<Integer>> lli;
    public List<List<Integer>> levelOrder(TreeNode root) {
        lli = new ArrayList<List<Integer>>();
        if(root==null)
            return lli;
        Queue<qObj> q = new LinkedList<>();
        int level = 0;
        List<Integer> li = new ArrayList<Integer>();
        q.add(new qObj(root, level));
        while(!q.isEmpty()) {
            qObj curr = q.remove();
            if(curr.level != level) {
                lli.add(li);
                level++;
                li = new ArrayList<Integer>();
            }
            li.add(curr.root.val);
            if(curr.root.left!=null) q.add(new qObj(curr.root.left, level+1));
            if(curr.root.right!=null) q.add(new qObj(curr.root.right, level+1));
        }
        lli.add(li);
        return lli;
    }
}

/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
Accepted
307,785
Submissions
671,275
*/

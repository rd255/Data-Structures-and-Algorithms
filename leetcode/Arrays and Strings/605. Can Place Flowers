class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int len = flowerbed.length;
        if(n>len)
            return false;
        int filled =0;
        int currcount =1;
        
        for(int i=0;i<len && filled<n;i++) {
            int curr = flowerbed[i];
            if(i==len-1 && curr==0) 
                currcount++;
            if(curr==1) {
                filled +=  ((currcount-1)/2);
                currcount = 0;
            } 
            else 
                currcount++;
        }
        
        filled+=((currcount-1)/2);
        return filled>=n;
    }
}
/*
Easy

545

288

Favorite

Share
Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: True
Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: False
Note:
The input array won't violate no-adjacent-flowers rule.
The input array size is in the range of [1, 20000].
n is a non-negative integer which won't exceed the input array size.
Accepted
71,808
Submissions
229,150
*/

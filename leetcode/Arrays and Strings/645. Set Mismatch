class Solution {
    public int[] findErrorNums(int[] nums) {
        int len = nums.length;
        boolean[] exists = new boolean[len+1];
        int dup = -1;
        for(int i=0;i<len;i++) {
            if(exists[nums[i]]) {
                dup = nums[i];
            }
            else {
                exists[nums[i]] = true;
            }
        }
        for(int i=1;i<=len;i++) {
            if(!exists[i]) {
                return new int[]{dup,i};
            }
        }
        return new int[]{-1,-1};
    }
}
/*
O(n) Time
O(n) Space
Easy

480

260

Favorite

Share
The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.

Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]
Note:
The given array size will in the range [2, 10000].
The given array's numbers won't have any order.
Accepted
56,759
Submissions
137,698
*/

class Solution {
    public int[] findErrorNums(int[] nums) {
        int xor = 0;
        int xor1 = 0;
        int xor0 = 0;
        int RMB = 0;
        int len = nums.length;
        // xor all elements of nums
        for(int n : nums)
            xor ^= n;
        // xor all numbers from 1 to len
        for(int i=1;i<=len;i++) 
            xor ^= i;
        // find right most bit
        RMB = xor & ~(xor -1);
        System.out.println(RMB);
        // xor1 : all elements with same bit as 1 where RMB = 1
        // xor 0 : all elements with same bit as 0 where RMB = 1
        for(int n : nums) 
            if((n & RMB) != 0)
                xor1 ^= n;
            else
                xor0 ^= n;
        for(int i=1;i<=len;i++) 
            if((i & RMB) != 0)
                xor1 ^= i;
            else
                xor0 ^= i;
        // if xor1 is found in nums, duplicate = xor1, missing = xor0
        // else duplicate = xor0, missing = xor1
        System.out.println("0:"+xor0 + ",1:" + xor1);
        for(int i=1;i<=len;i++)
            if(nums[i]==xor0) 
                return new int[] {xor0,xor1};
            else if(nums[i] == xor1)
                return new int[] {xor1,xor0};
        return new int[] {-1,-1};
    }
}
/*
O(1) space
*/

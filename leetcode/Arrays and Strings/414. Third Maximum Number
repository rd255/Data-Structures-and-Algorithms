class Solution {
    public int thirdMax(int[] nums) {
        long firstmax = Integer.MIN_VALUE;
        long secondmax =Integer.MIN_VALUE;
        long thirdmax = Integer.MIN_VALUE;
        long mymin = Integer.MIN_VALUE;
        firstmax -=1;
        secondmax -=1;
        thirdmax -=1;
        mymin -=1;
        for (int i=0;i<nums.length;i++) {
            if(nums[i] == firstmax || nums[i] == secondmax || nums[i] == thirdmax) {
                continue;
            }
            if(nums[i] >= firstmax) {
                thirdmax = secondmax;
                secondmax = firstmax;
                firstmax = nums[i];
            }
            else if(nums[i] >= secondmax ) {
                thirdmax = secondmax;
                secondmax = nums[i];
            }
            else if(nums[i] >= thirdmax) {
                thirdmax = nums[i];
            }
        }
        if(thirdmax > mymin && thirdmax!= secondmax) {
            return (int)thirdmax;
        }
        if(firstmax > mymin) {
            return (int)firstmax;    
        }
        return Integer.MIN_VALUE;
    }
}
/*
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
Accepted
104,064
Submissions
353,525
*/

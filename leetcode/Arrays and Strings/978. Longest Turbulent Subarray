class Solution {
    public int maxTurbulenceSize(int[] A) {
        int len = A.length;
        int currcount = 1;
        int maxcount = 1;
        int dir =0;
        for(int i=1;i<len;i++) {
            if(A[i]==A[i-1]) {
                currcount =1;
                dir=0;
            }
            else if(dir==0) {
                if(A[i-1]<A[i]) {
                    dir = 1;
                }
                else if(A[i-1]>A[i]) {
                    dir =-1;
                }
                currcount++;
                maxcount = Math.max(maxcount,currcount);
            }
            else if((dir==1 && A[i-1]>A[i]) || (dir==-1 & A[i-1]<A[1]) ) {
                dir*=-1;
                currcount++;
                maxcount = Math.max(maxcount,currcount);
            }
            else {
                currcount = 1;
                dir = 0;
                i--;
            }
        }
        return maxcount;
    }
}
/*
Medium

136

52

Favorite

Share
A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:

For i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;
OR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.
That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

Return the length of a maximum size turbulent subarray of A.

 

Example 1:

Input: [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: (A[1] > A[2] < A[3] > A[4] < A[5])
Example 2:

Input: [4,8,12,16]
Output: 2
Example 3:

Input: [100]
Output: 1
 

Note:

1 <= A.length <= 40000
0 <= A[i] <= 10^9
Accepted
14,119
Submissions
30,851
*/
